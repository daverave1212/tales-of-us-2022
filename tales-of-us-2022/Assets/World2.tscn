[gd_scene load_steps=27 format=2]

[ext_resource path="res://Assets/Backgrounds/Blue.png" type="Texture" id=1]
[ext_resource path="res://Assets/Other/White.png" type="Texture" id=2]
[ext_resource path="res://Assets/Fonts/Cohaerentia-Regular.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://Assets/Board.cs" type="Script" id=4]
[ext_resource path="res://Assets/Other/TextBackground2.png" type="Texture" id=5]
[ext_resource path="res://Assets/TextBackground.cs" type="Script" id=6]
[ext_resource path="res://Assets/Prefabs/FadeableComponent.tscn" type="PackedScene" id=7]
[ext_resource path="res://Assets/Delay.cs" type="Script" id=8]
[ext_resource path="res://Assets/TransitionLabel.cs" type="Script" id=9]
[ext_resource path="res://Assets/Other/BorderLeft.png" type="Texture" id=10]
[ext_resource path="res://Assets/Background.cs" type="Script" id=11]
[ext_resource path="res://Assets/Backgrounds/ForestBackground.png" type="Texture" id=12]
[ext_resource path="res://Assets/ParticleSpawner.cs" type="Script" id=13]
[ext_resource path="res://Assets/Other/Particle.png" type="Texture" id=14]
[ext_resource path="res://Scripts/Sounder.cs" type="Script" id=15]

[sub_resource type="Shader" id=3]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 2.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.005;
uniform float strengthScale = 100.0;
uniform float interval = 4.5;
uniform float detail = 1;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/speed = 2.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.005
shader_param/strengthScale = 100.0
shader_param/interval = 4.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0

[sub_resource type="Shader" id=9]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.5
shader_param/cutoff = 0.1
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;
uniform vec2 player_position;
uniform vec4 color : hint_color = vec4(0.305, 0.298, 0.341,1);

uniform float MULTIPLIER = 0.56;
uniform float SCALE = 0.5;
uniform float SOFTNESS = 0.45;

void fragment(){
	float val = distance(vec2(UV.x , UV.y * MULTIPLIER), vec2(player_position.x , player_position.y * MULTIPLIER));
	val = val / SCALE;
	float vignette = smoothstep(0.2, SOFTNESS, val);
	COLOR = vec4(color.rgb , vignette );
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/player_position = null
shader_param/color = Color( 0.305, 0.298, 0.341, 1 )
shader_param/MULTIPLIER = 0.56
shader_param/SCALE = 0.5
shader_param/SOFTNESS = 0.45

[sub_resource type="DynamicFont" id=2]
size = 300
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=1]
size = 500
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="Gradient" id=11]
offsets = PoolRealArray( 0, 0.337662, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 0.918831, 0.918831, 0.918831, 0.5, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=12]
gradient = SubResource( 11 )

[sub_resource type="ParticlesMaterial" id=13]
emission_shape = 2
emission_box_extents = Vector3( 100, 100, 1 )
flag_disable_z = true
direction = Vector3( -0.628, 1, 0 )
spread = 87.97
gravity = Vector3( 0, -400, 0 )
orbit_velocity = 0.0
orbit_velocity_random = 0.0
damping = 30.0
angle = 43.2
angle_random = 0.32
scale = 34.0
scale_random = 0.2
color_ramp = SubResource( 12 )

[node name="World" type="Node2D"]

[node name="Delay" type="Node" parent="."]
script = ExtResource( 8 )

[node name="Background" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 110.778, 60.8751 )
scale = Vector2( 6.4632, 6.46319 )
texture = ExtResource( 12 )
script = ExtResource( 11 )

[node name="GodRays" type="Sprite" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.184314 )
material = SubResource( 10 )
position = Vector2( -457, -552 )
scale = Vector2( 4.99479, 6.93889 )
texture = ExtResource( 1 )

[node name="Camera2D" type="Camera2D" parent="."]
material = SubResource( 8 )
current = true
zoom = Vector2( 6.5, 6.5 )

[node name="BorderLeft" type="Sprite" parent="Camera2D"]
position = Vector2( -3586, -111 )
scale = Vector2( 4.60593, 4.60593 )
texture = ExtResource( 10 )

[node name="BorderRIght" type="Sprite" parent="Camera2D"]
position = Vector2( 3564, -88 )
rotation = 3.14159
scale = Vector2( 4.60593, 4.60593 )
texture = ExtResource( 10 )

[node name="Board" type="Node2D" parent="."]
script = ExtResource( 4 )

[node name="CardsOnBoard" type="Node2D" parent="Board"]

[node name="CardsInHand" type="Node" parent="Board"]

[node name="TextBackground" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 118.5, -1919.5 )
scale = Vector2( 5.39531, 4.20222 )
texture = ExtResource( 5 )
script = ExtResource( 6 )

[node name="FadeableComponent" parent="TextBackground" instance=ExtResource( 7 )]

[node name="DialogueLabel" type="Label" parent="."]
process_priority = -1
modulate = Color( 1, 1, 1, 0 )
margin_left = -3576.0
margin_top = -2444.0
margin_right = 3543.0
margin_bottom = -887.0
custom_fonts/font = SubResource( 2 )
text = "That does nothing for now..."
align = 1
valign = 1

[node name="FadeableComponent" parent="DialogueLabel" instance=ExtResource( 7 )]

[node name="TransitionLabel" type="Label" parent="."]
process_priority = -1
modulate = Color( 1, 1, 1, 0 )
margin_left = -3564.0
margin_top = -736.0
margin_right = 3517.0
margin_bottom = 859.0
rect_pivot_offset = Vector2( 3566, 734 )
custom_fonts/font = SubResource( 1 )
text = "You died."
align = 1
valign = 1
script = ExtResource( 9 )

[node name="FadeableComponent" parent="TransitionLabel" instance=ExtResource( 7 )]

[node name="Particles2D" type="Particles2D" parent="."]
position = Vector2( -7900, 454 )
scale = Vector2( 5, 5 )
z_index = 66
emitting = false
amount = 50
lifetime = 2.0
one_shot = true
speed_scale = 4.0
visibility_rect = Rect2( -100, -100, 700, 700 )
local_coords = false
process_material = SubResource( 13 )
texture = ExtResource( 14 )
script = ExtResource( 13 )

[node name="WhiteForeground" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 152.5, 87 )
scale = Vector2( 12.0258, 9.3033 )
z_index = 999
texture = ExtResource( 2 )

[node name="FadeableComponent" parent="WhiteForeground" instance=ExtResource( 7 )]

[node name="Sounder" type="AudioStreamPlayer" parent="."]
script = ExtResource( 15 )

[node name="SounderSuccess" type="AudioStreamPlayer" parent="."]
script = ExtResource( 15 )

[node name="SounderMusic" type="AudioStreamPlayer" parent="."]
script = ExtResource( 15 )
